# language: yaml
name: Build and publish Docker image

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write   # necessário apenas se usar OIDC para autenticação externa

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [23]
    env:
      IMAGE_NAME: horas_estagio
      REGISTRY: ghcr.io
      PROJECT_DIR: ./horas_estagio
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}
          cache: 'maven'

      - name: Cache Maven local repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-
            
       # Trabalhar na subpasta horas_estagio onde está o pom.xml e o mvnw
      - name: Grant execute permission for mvnw
        working-directory: ${{ env.PROJECT_DIR }}
        run: chmod +x ./mvnw
        
      - name: Build (compile + tests)
        working-directory: ${{ env.PROJECT_DIR }}
        run: mvn -B -U clean package

      - name: Package artifact (skip tests)
        working-directory: ${{ env.PROJECT_DIR }}
        run: ./mvnw -B -DskipTests clean package

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: horas_estagio/target/*.jar

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar

      - name: Set up QEMU (for multi-platform) and Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.PROJECT_DIR }}
          file: ${{ env.PROJECT_DIR }}/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          # monta dinamicamente o nome do repositório usando github.repository_owner e IMAGE_NAME
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            MAVEN_BUILD=target

      - name: Image info
        run: |
          echo "Image pushed: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
