# language: yaml
name: Build and publish Docker image

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write   # necessário apenas se usar OIDC para autenticação externa

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [23]
    env:
      IMAGE_NAME: horas_estagio
      REGISTRY: ghcr.io
      PROJECT_DIR: ./horas_estagio
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}
          cache: 'maven'

      - name: Cache Maven local repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-
            
       # Trabalhar na subpasta horas_estagio onde está o pom.xml e o mvnw
      - name: Grant execute permission for mvnw
        working-directory: ${{ env.PROJECT_DIR }}
        run: chmod +x ./mvnw
        
      - name: Build (compile + tests)
        working-directory: ${{ env.PROJECT_DIR }}
        run: mvn -B -U clean package

      - name: Package artifact (skip tests)
        working-directory: ${{ env.PROJECT_DIR }}
        run: ./mvnw -B -DskipTests clean package

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: horas_estagio/target/*.jar

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar

      - name: Set up QEMU (for multi-platform) and Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.PROJECT_DIR }}
          file: ${{ env.PROJECT_DIR }}/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          # monta dinamicamente o nome do repositório usando github.repository_owner e IMAGE_NAME
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            MAVEN_BUILD=target

      - name: Image info
        run: |
          echo "Image pushed: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        ##---------------------------------Novas------------------------------------------------------

      - name: Define runtime variables
        run: |
          echo "IMAGE=${{ github.event.inputs.image }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ github.event.inputs.db_password }}" >> $GITHUB_ENV
          echo "NETWORK_NAME=horas_estagio_net" >> $GITHUB_ENV
          echo "DB_CONTAINER=horas_estagio_db" >> $GITHUB_ENV
          echo "APP_CONTAINER=horas_estagio_app" >> $GITHUB_ENV

      - name: Create docker network
        run: |
          docker network create $NETWORK_NAME || true
        env:
          NETWORK_NAME: ${{ env.NETWORK_NAME }}

      - name: Start Postgres container
        run: |
          docker run -d --name $DB_CONTAINER \
            --network $NETWORK_NAME \
            -e POSTGRES_DB=postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=admin \
            -p 5432:5432 \
            postgres:15
        env:
          DB_CONTAINER: ${{ env.DB_CONTAINER }}
          NETWORK_NAME: ${{ env.NETWORK_NAME }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}

      - name: Wait for Postgres to be ready
        run: |
          echo "Waiting for Postgres on network $NETWORK_NAME..."
          for i in $(seq 1 60); do
            if docker exec $DB_CONTAINER pg_isready -U postgres >/dev/null 2>&1; then
              echo "Postgres ready"
              break
            fi
            echo "  waiting... ($i)"
            sleep 2
          done

          if ! docker exec $DB_CONTAINER pg_isready -U postgres >/dev/null 2>&1; then
            echo "Postgres not ready after timeout" >&2
            docker logs $DB_CONTAINER || true
            exit 1
          fi
        env:
          NETWORK_NAME: ${{ env.NETWORK_NAME }}
          DB_CONTAINER: ${{ env.DB_CONTAINER }}

      - name: Pull application image from Docker Hub
        run: |
          echo "Pulling image: $IMAGE"
          docker pull $IMAGE
        env:
          IMAGE: ${{ env.IMAGE }}

      - name: Stop & remove previous app container if exists
        run: |
          if [ "$(docker ps -aq -f name=$APP_CONTAINER)" ]; then
            docker rm -f $APP_CONTAINER || true
          fi
        env:
          APP_CONTAINER: ${{ env.APP_CONTAINER }}

      - name: Run application container (pulled from Docker Hub)
        run: |
          docker run -d --name $APP_CONTAINER \
            --network $NETWORK_NAME \
            -p 8080:8080 \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://$DB_CONTAINER:5432/postgres \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD=$DB_PASSWORD \
            -e SPRING_PROFILES_ACTIVE=prod \
            $IMAGE

          echo "Waiting a few seconds for application to start..."
          sleep 8
          echo "==== Application logs (tail 200) ===="
          docker logs --tail 200 $APP_CONTAINER || true
        env:
          APP_CONTAINER: ${{ env.APP_CONTAINER }}
          NETWORK_NAME: ${{ env.NETWORK_NAME }}
          DB_CONTAINER: ${{ env.DB_CONTAINER }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
          IMAGE: ${{ env.IMAGE }}

      - name: Smoke test - health endpoint
        run: |
          echo "Attempting HTTP health check on app..."
          for i in $(seq 1 20); do
            if curl -sSf http://localhost:8080/actuator/health >/dev/null 2>&1; then
              echo "App health OK"
              exit 0
            fi
            echo "Waiting for app... ($i)"
            sleep 3
          done
          echo "App did not become healthy in time. Dump logs:"
          docker logs $APP_CONTAINER || true
          exit 1
        env:
          APP_CONTAINER: ${{ env.APP_CONTAINER }}

      - name: Teardown (optional) - keep for debugging; comment out to persist containers
        if: always()
        run: |
          echo "Stopping and removing containers and network (cleanup)..."
          docker rm -f $APP_CONTAINER || true
          docker rm -f $DB_CONTAINER || true
          docker network rm $NETWORK_NAME || true
        env:
          APP_CONTAINER: ${{ env.APP_CONTAINER }}
          DB_CONTAINER: ${{ env.DB_CONTAINER }}
          NETWORK_NAME: ${{ env.NETWORK_NAME }}


