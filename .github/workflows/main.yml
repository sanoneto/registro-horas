name: CI/CD da Aplicação Java 'horas_estagio'

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [develop]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

env:
  PROJECT_DIR: ./horas_estagio
  IMAGE_NAME: horas_estagio
  DOCKERHUB_REGISTRY: docker.io

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '23'
          cache: maven
      
      - name: Grant execute permission for mvnw
        run: chmod +x ${{ env.PROJECT_DIR }}/mvnw

      - name: Build, test, and package with Maven
        working-directory: ${{ env.PROJECT_DIR }}
        run: ./mvnw -B clean package
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: ${{ env.PROJECT_DIR }}/target/*.jar

  build-and-publish-docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: ${{ env.PROJECT_DIR }}/target/
          
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.PROJECT_DIR }}
          file: ${{ env.PROJECT_DIR }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            MAVEN_BUILD=target

  integration-tests:
    needs: build-and-publish-docker
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '23'
          cache: maven

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: ${{ env.PROJECT_DIR }}/target/

      - name: Run application container for tests
        run: |
          docker run -d --name horas_estagio_app \
            --network host \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/postgres \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD=admin \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Wait for application to be ready (optional)
        run: |
          # Adicione aqui um comando curl ou wait-on para verificar a saúde da aplicação
          echo "Waiting for application to be ready..."
          sleep 10
      
      - name: Execute integration tests
        run: |
          # Adicione o comando para executar os seus testes de integração
          # Por exemplo, se tiver testes de integração em um módulo Maven
          # ${{ env.PROJECT_DIR }}/mvnw failsafe:integration-test
          echo "Executar testes de integração aqui..."

      - name: Run teardown (optional)
        if: always()
        run: |
          docker rm -f horas_estagio_app || true
